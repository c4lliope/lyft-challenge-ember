eval("//# sourceURL=assets/ember-cli/loader.js");

;eval("define(\"rideshare/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: \'rideshare\', // TODO: loaded via config\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, \'rideshare\');\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=rideshare/app.js");

;eval("define(\"rideshare/controllers/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Controller.extend({\n      actions: {\n                 updateMap: function() {\n                              var routeA = this.get(\'routeA\');\n                              var origin = routeA.get(\'origin\');\n                              var destination = routeA.get(\'destination\');\n                              displayRoute(directionsDisplayA, origin, destination);\n\n                              var routeB = this.get(\'routeB\');\n                              var origin = routeB.get(\'origin\');\n                              var destination = routeB.get(\'destination\');\n                              displayRoute(directionsDisplayB, origin, destination);\n\n                              this.send(\'arbitrate\');\n                            },\n\n           centerMapOnRoutePoints: function() {\n                                     var points = [this.get(\'routeA\').get(\'origin\'),\n           this.get(\'routeA\').get(\'destination\'),\n           this.get(\'routeB\').get(\'origin\'),\n           this.get(\'routeB\').get(\'destination\')];\n                                     centerMap(points);\n                                   },\n\n           arbitrate: function() {\n                        var routeA = this.get(\'routeA\');\n                        var routeB = this.get(\'routeB\');\n\n                        routeA.set(\'winner\', false);\n                        routeB.set(\'winner\', false);\n\n                        var originA = routeA.get(\'origin\');\n                        var destinationA = routeA.get(\'destination\');\n                        var originB = routeB.get(\'origin\');\n                        var destinationB = routeB.get(\'destination\');\n\n                        var service = new google.maps.DistanceMatrixService();\n                        service.getDistanceMatrix(\n                            {\n                              origins: [originA, originB, destinationA, destinationB],\n                          destinations: [originA, originB, destinationA, destinationB],\n                          travelMode: google.maps.TravelMode.DRIVING,\n                          unitSystem: google.maps.UnitSystem.IMPERIAL,\n                          durationInTraffic: false,\n                          avoidHighways: false,\n                          avoidTolls: false\n                            }, callback);\n\n                        var self=this;\n                        function callback(response, status) {\n                          if (status == google.maps.DistanceMatrixStatus.OK) {\n                            var aPickUpBDistance = response.rows[0].elements[1].distance.value +\n                              response.rows[1].elements[3].distance.value +\n                              response.rows[3].elements[2].distance.value;\n                            console.log(\"a picks up b: \" + aPickUpBDistance);\n\n                            var bPickUpADistance = response.rows[1].elements[0].distance.value +\n                              response.rows[0].elements[2].distance.value +\n                              response.rows[2].elements[3].distance.value;\n                            console.log(\"b picks up a: \" + bPickUpADistance);\n\n                            var winner, loser;\n                            var winnerDistance, loserDistance;\n                            if(aPickUpBDistance < bPickUpADistance) {\n                              winner = \"A\"; loser = \"B\";\n                              routeA.set(\'winner\', true);\n                              winnerDistance = aPickUpBDistance;\n                              loserDistance = bPickUpADistance;\n                            } else {\n                              winner = \"B\"; loser = \"A\";\n                              routeB.set(\'winner\', true);\n                              winnerDistance = bPickUpADistance;\n                              loserDistance = aPickUpBDistance;\n                            }\n                            self.send(\'drawPickupDropoffLegs\', winner, loser);\n                            self.send(\'setWinnerMessage\', winner, loser, winnerDistance, loserDistance);\n                          }\n                        }\n                      },\n\n           drawPickupDropoffLegs: function(winnerLetter, loserLetter) {\n                                    var winner = this.get(\'route\'+winnerLetter);\n                                    var loser = this.get(\'route\'+loserLetter);\n\n                                    displayRoute(directionsDisplayPickup,\n                                        winner.get(\'origin\'),\n                                        loser.get(\'origin\'));\n                                    displayRoute(directionsDisplayDropoff,\n                                        loser.get(\'destination\'),\n                                        winner.get(\'destination\'));\n\n                                    this.send(\'centerMapOnRoutePoints\');\n                                  },\n\n           setWinnerMessage: function(winnerLetter, loserLetter, winnerDistance, loserDistance) {\n                               var winner = this.get(\'route\'+winnerLetter);\n                               var loser = this.get(\'route\'+loserLetter);\n\n                               var difference = loserDistance - winnerDistance;\n                               var difference_miles = Number((difference / 1609.34).toFixed(1));\n\n                               var message = \"If \" + winner.get(\'driverName\') +\n                                 \" gives \" + loser.get(\'driverName\') + \" a lift, \" +\n                                 \"the drive will be \" + difference_miles + \" miles shorter.\"\n                                 console.log(message);\n                               winner.set(\'winnerText\', message);\n                             }\n               }\n    });\n  });//# sourceURL=rideshare/controllers/application.js");

;eval("define(\"rideshare/models/map\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DS.Model.extend({\n\n    });\n  });//# sourceURL=rideshare/models/map.js");

;eval("define(\"rideshare/models/route\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DS.Model.extend({\n      driverName: DS.attr(\'string\'),\n      origin: DS.attr(\'string\'),\n           destination: DS.attr(\'string\'),\n           winner: DS.attr(\'boolean\'),\n           winnerText: DS.attr(\'string\'),\n           iconPath: DS.attr(\'string\')\n    });\n  });//# sourceURL=rideshare/models/route.js");

;eval("define(\"rideshare/router\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: RideshareENV.locationType\n    });\n\n    Router.map(function() {\n      this.route(\'application\');\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=rideshare/router.js");

;eval("define(\"rideshare/routes/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n      setupController: function(controller) {\n                         controller.set(\'routeA\', this.store.createRecord(\'route\', {\n                           driverName: \'Ashley\',\n                           origin: \'Sutro Heights Park, SF\',\n                           destination: \'Golden Gate Bridge, SF\',\n                           iconPath: \"assets/woman.svg\"\n                         }));\n                         controller.set(\'routeB\', this.store.createRecord(\'route\', {\n                           driverName: \'Matt\',\n                           origin: \'University of San Francisco\',\n                           destination: \'Pier 39, San Francisco\',\n                           iconPath: \"assets/man.svg\"\n                         }));\n                       }\n    });\n  });//# sourceURL=rideshare/routes/application.js");

;eval("define(\"rideshare/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<div class=\\\"header\\\">\\n  <div class=\\\"container\\\">\\n    <span class=\\\"site-name\\\">Rideshare Resolver</span>\\n  </div>\\n</div>\\n\\n<div class=\\\"container\\\">\\n  <div class=\\\"routes\\\">\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers.render || (depth0 && depth0.render),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"route\", \"routeA\", options) : helperMissing.call(depth0, \"render\", \"route\", \"routeA\", options))));\n      data.buffer.push(\"\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers.render || (depth0 && depth0.render),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"route\", \"routeB\", options) : helperMissing.call(depth0, \"render\", \"route\", \"routeB\", options))));\n      data.buffer.push(\"\\n\\n    <button class=\\\"update\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"updateMap\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Find the Best Ride</button>\\n  </div>\\n  \");\n      data.buffer.push(escapeExpression((helper = helpers.render || (depth0 && depth0.render),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"map\", \"map\", options) : helperMissing.call(depth0, \"render\", \"map\", \"map\", options))));\n      data.buffer.push(\"\\n\\n  <div class=\\\"description\\\">\\n    Learn about the tool and get the code on <a href=\\\"https://github.com/graysonwright/lyft-challenge-ember\\\">github</a>\\n  </div>\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=rideshare/templates/application.js");

;eval("define(\"rideshare/templates/map\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"<div id=\\\"map\\\" class=\\\"map\\\"></div>\\n\\n<script>\\n  var directionsDisplayA;\\n  var directionsDisplayB;\\n  var directionsDisplayPickup;\\n  var directionsDisplayDropoff;\\n  var map;\\n\\n  function initialize() {\\n    directionsDisplayA = new google.maps.DirectionsRenderer({preserveViewport: true,\\n      polylineOptions: { strokeColor: \'rgb(0, 180, 174)\',\\n        strokeWeight: 8 }})\\n    directionsDisplayB = new google.maps.DirectionsRenderer({preserveViewport: true,\\n      polylineOptions: { strokeColor: \'rgb(229, 99, 133)\',\\n        strokeWeight: 8 }})\\n    directionsDisplayPickup = new google.maps.DirectionsRenderer({preserveViewport: true,\\n      suppressMarkers: true})\\n    directionsDisplayDropoff = new google.maps.DirectionsRenderer({preserveViewport: true,\\n      suppressMarkers: true})\\n    var sanFran = new google.maps.LatLng(37.802139, -122.41874);\\n    var mapOptions = {\\n      zoom: 12,\\n      center: sanFran\\n    }\\n    map = new google.maps.Map(document.getElementById(\\\"map\\\"), mapOptions);\\n    directionsDisplayA.setMap(map);\\n    directionsDisplayB.setMap(map);\\n    directionsDisplayPickup.setMap(map);\\n    directionsDisplayDropoff.setMap(map);\\n    gelocatorRequestsRemaining = 4;\\n  }\\n\\n  function displayRoute(directionsDisplay, start, end) {\\n    var directionsService = new google.maps.DirectionsService();\\n    var request = {\\n      origin:start,\\n      destination:end,\\n      travelMode: google.maps.TravelMode.DRIVING\\n    };\\n    directionsService.route(request, function(result, status) {\\n      if (status == google.maps.DirectionsStatus.OK) {\\n        directionsDisplay.setDirections(result);\\n        } else {\\n        alert(\\\"Right now, we can only make a couple requests to google each second. \\\" +\\n        \\\"Chill for a couple seconds, and everything should go back to normal.\\\");\\n      }\\n    });\\n  }\\n\\n  var latLngBounds;\\n  var gelocatorRequestsRemaining;\\n\\n  function centerMap(locations) {\\n    latLngBounds = new google.maps.LatLngBounds();\\n    gelocatorRequestsRemaining = 4;\\n\\n    for (var i = 0; i < 4; i++) {\\n      var location = locations[i];\\n      var geocoder = new google.maps.Geocoder();\\n      var request = { address: location };\\n\\n      geocoder.geocode(request, function(result, status) {\\n        latLngBounds.extend(result[0].geometry.location);\\n\\n        --gelocatorRequestsRemaining;\\n        centerMapIfFinished();\\n      });\\n    }\\n  }\\n\\n  function centerMapIfFinished() {\\n    if (gelocatorRequestsRemaining <= 0) {\\n      map.fitBounds(latLngBounds);\\n      gelocatorRequestsRemaining = 4;\\n    }\\n  }\\n\\n  google.maps.event.addDomListener(window, \'load\', initialize);\\n  //this.get(\'ApplicationController\').send(\'updateMap\');\\n</script>\\n\");\n      \n    });\n  });//# sourceURL=rideshare/templates/map.js");

;eval("define(\"rideshare/templates/route\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n  <div class=\\\"winner\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"winnerText\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</div>\\n  \");\n      return buffer;\n      }\n\n      data.buffer.push(\"<div class=\\\"route\\\">\\n  <div class=\\\"inputs\\\">\\n    <img class=\\\"driver-icon\\\" alt=\\\"driver-icon\\\" \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'src\': (\"iconPath\")\n      },hashTypes:{\'src\': \"ID\"},hashContexts:{\'src\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"driverName\"),\n        \'class\': (\"driver-name\")\n      },hashTypes:{\'value\': \"ID\",\'class\': \"STRING\"},hashContexts:{\'value\': depth0,\'class\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n\\n    <label>From</label>\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"origin\"),\n        \'action\': (\"updateMap\"),\n        \'class\': (\"location origin\"),\n        \'type\': (\"text\"),\n        \'placeholder\': (\"Origin\")\n      },hashTypes:{\'value\': \"ID\",\'action\': \"STRING\",\'class\': \"STRING\",\'type\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'action\': depth0,\'class\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n    <label>To</label>\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"destination\"),\n        \'action\': (\"updateMap\"),\n        \'class\': (\"location destination\"),\n        \'type\': (\"text\"),\n        \'placeholder\': (\"Destination\")\n      },hashTypes:{\'value\': \"ID\",\'action\': \"STRING\",\'class\': \"STRING\",\'type\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'action\': depth0,\'class\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n  </div>\\n  \");\n      stack1 = helpers[\'if\'].call(depth0, \"winner\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=rideshare/templates/route.js");

;eval("define(\"rideshare/tests/helpers/resolver\", \n  [\"ember/resolver\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: \'rideshare\'\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=rideshare/tests/helpers/resolver.js");

;eval("define(\"rideshare/tests/helpers/start-app\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global require */\n\n    var Application = require(\'rideshare/app\')[\'default\'];\n    var Router = require(\'rideshare/router\')[\'default\'];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({\n        // useful Test defaults\n        rootElement: \'#ember-testing\',\n        LOG_ACTIVE_GENERATION:false,\n        LOG_VIEW_LOOKUPS: false\n      }, attrs); // but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function(){\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=rideshare/tests/helpers/start-app.js");

;eval("define(\"rideshare/tests/rideshare/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare\');\n    test(\'rideshare/app.js should pass jshint\', function() { \n      ok(true, \'rideshare/app.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/app.jshint.js");

;eval("define(\"rideshare/tests/rideshare/controllers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/controllers\');\n    test(\'rideshare/controllers/application.js should pass jshint\', function() { \n      ok(false, \'rideshare/controllers/application.js should pass jshint.\\nrideshare/controllers/application.js: line 12, col 38, \\\'origin\\\' is already defined.\\nrideshare/controllers/application.js: line 13, col 43, \\\'destination\\\' is already defined.\\nrideshare/controllers/application.js: line 53, col 36, Expected \\\'===\\\' and instead saw \\\'==\\\'.\\nrideshare/controllers/application.js: line 106, col 89, Missing semicolon.\\nrideshare/controllers/application.js: line 9, col 27, \\\'displayRoute\\\' is not defined.\\nrideshare/controllers/application.js: line 9, col 40, \\\'directionsDisplayA\\\' is not defined.\\nrideshare/controllers/application.js: line 14, col 27, \\\'displayRoute\\\' is not defined.\\nrideshare/controllers/application.js: line 14, col 40, \\\'directionsDisplayB\\\' is not defined.\\nrideshare/controllers/application.js: line 24, col 34, \\\'centerMap\\\' is not defined.\\nrideshare/controllers/application.js: line 39, col 39, \\\'google\\\' is not defined.\\nrideshare/controllers/application.js: line 44, col 35, \\\'google\\\' is not defined.\\nrideshare/controllers/application.js: line 45, col 35, \\\'google\\\' is not defined.\\nrideshare/controllers/application.js: line 53, col 37, \\\'google\\\' is not defined.\\nrideshare/controllers/application.js: line 87, col 33, \\\'displayRoute\\\' is not defined.\\nrideshare/controllers/application.js: line 87, col 46, \\\'directionsDisplayPickup\\\' is not defined.\\nrideshare/controllers/application.js: line 90, col 33, \\\'displayRoute\\\' is not defined.\\nrideshare/controllers/application.js: line 90, col 46, \\\'directionsDisplayDropoff\\\' is not defined.\\n\\n17 errors\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/controllers/application.jshint.js");

;eval("define(\"rideshare/tests/rideshare/models/map.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/models\');\n    test(\'rideshare/models/map.js should pass jshint\', function() { \n      ok(true, \'rideshare/models/map.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/models/map.jshint.js");

;eval("define(\"rideshare/tests/rideshare/models/route.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/models\');\n    test(\'rideshare/models/route.js should pass jshint\', function() { \n      ok(true, \'rideshare/models/route.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/models/route.jshint.js");

;eval("define(\"rideshare/tests/rideshare/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare\');\n    test(\'rideshare/router.js should pass jshint\', function() { \n      ok(true, \'rideshare/router.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/router.jshint.js");

;eval("define(\"rideshare/tests/rideshare/routes/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/routes\');\n    test(\'rideshare/routes/application.js should pass jshint\', function() { \n      ok(true, \'rideshare/routes/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/routes/application.jshint.js");

;eval("define(\"rideshare/tests/rideshare/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/tests/helpers\');\n    test(\'rideshare/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'rideshare/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/tests/helpers/resolver.jshint.js");

;eval("define(\"rideshare/tests/rideshare/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/tests/helpers\');\n    test(\'rideshare/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'rideshare/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/tests/helpers/start-app.jshint.js");

;eval("define(\"rideshare/tests/rideshare/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/tests\');\n    test(\'rideshare/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'rideshare/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/tests/test-helper.jshint.js");

;eval("define(\"rideshare/tests/rideshare/tests/unit/controllers/application-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/tests/unit/controllers\');\n    test(\'rideshare/tests/unit/controllers/application-test.js should pass jshint\', function() { \n      ok(true, \'rideshare/tests/unit/controllers/application-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/tests/unit/controllers/application-test.jshint.js");

;eval("define(\"rideshare/tests/rideshare/tests/unit/models/map-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/tests/unit/models\');\n    test(\'rideshare/tests/unit/models/map-test.js should pass jshint\', function() { \n      ok(true, \'rideshare/tests/unit/models/map-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/tests/unit/models/map-test.jshint.js");

;eval("define(\"rideshare/tests/rideshare/tests/unit/models/route-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/tests/unit/models\');\n    test(\'rideshare/tests/unit/models/route-test.js should pass jshint\', function() { \n      ok(true, \'rideshare/tests/unit/models/route-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/tests/unit/models/route-test.jshint.js");

;eval("define(\"rideshare/tests/rideshare/tests/unit/routes/application-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - rideshare/tests/unit/routes\');\n    test(\'rideshare/tests/unit/routes/application-test.js should pass jshint\', function() { \n      ok(true, \'rideshare/tests/unit/routes/application-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=rideshare/tests/rideshare/tests/unit/routes/application-test.jshint.js");

;eval("define(\"rideshare/tests/test-helper\", \n  [\"rideshare/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n  });//# sourceURL=rideshare/tests/test-helper.js");

;eval("define(\"rideshare/tests/unit/controllers/application-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var test = __dependency1__.test;\n    var moduleFor = __dependency1__.moduleFor;\n\n    moduleFor(\'controller:application\', \'ApplicationController\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    // Replace this with your real tests.\n    test(\'it exists\', function() {\n      var controller = this.subject();\n      ok(controller);\n    });\n  });//# sourceURL=rideshare/tests/unit/controllers/application-test.js");

;eval("define(\"rideshare/tests/unit/models/map-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var test = __dependency1__.test;\n    var moduleForModel = __dependency1__.moduleForModel;\n\n    moduleForModel(\'map\', \'Map\', {\n      // Specify the other units that are required for this test.\n      needs: []\n    });\n\n    test(\'it exists\', function() {\n      var model = this.subject();\n      // var store = this.store();\n      ok(model);\n    });\n  });//# sourceURL=rideshare/tests/unit/models/map-test.js");

;eval("define(\"rideshare/tests/unit/models/route-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var test = __dependency1__.test;\n    var moduleForModel = __dependency1__.moduleForModel;\n\n    moduleForModel(\'route\', \'Route\', {\n      // Specify the other units that are required for this test.\n      needs: []\n    });\n\n    test(\'it exists\', function() {\n      var model = this.subject();\n      // var store = this.store();\n      ok(model);\n    });\n  });//# sourceURL=rideshare/tests/unit/models/route-test.js");

;eval("define(\"rideshare/tests/unit/routes/application-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var test = __dependency1__.test;\n    var moduleFor = __dependency1__.moduleFor;\n\n    moduleFor(\'route:application\', \'ApplicationRoute\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    test(\'it exists\', function() {\n      var route = this.subject();\n      ok(route);\n    });\n  });//# sourceURL=rideshare/tests/unit/routes/application-test.js");
